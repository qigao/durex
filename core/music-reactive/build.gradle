plugins {
    alias qLibs.plugins.quarkus
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/exceptions/**',
                '**/entity/**',
            ]
            )
        }))
    }
}

dependencies {
    implementation project(":core:shared:utils")
    implementation project(":core:shared:junit-helper")
    implementation project(":core:shared:jooq-codegen")
    implementation project(":core:schema:music:json")
    implementation project(":core:schema:music:r2dbc")
    implementation project(":core:schema:music:entity")
    implementation project(":core:shared:jakarta:common")
    implementation project(":core:shared:jakarta:config")
    implementation dbLibs.redisson
    implementation vLibs.reactor.core
    testImplementation tLibs.reactor.test
}

apply from: "$rootDir/gradle/library/quarkus-core.gradle"
apply from: "$rootDir/gradle/library/quarkus-reactive.gradle"
apply from: "$rootDir/gradle/library/sqldb.gradle"


task startDocker {
    description = 'Database related tasks.'
    group = 'Database'
    doFirst {
        File workingDir = new File("$projectDir/docker")
        String command = "docker-compose up -d"
        def proc = command.execute(null, workingDir)
        proc.waitFor()
    }
    doLast {
        exec {
            commandLine("$rootDir/scripts/waitFor.sh")
            args = [
                    "-h",
                    "localhost",
                    "-p",
                    "6379"
            ]
        }
    }
}

tasks.test.dependsOn(startDocker)
