#set($serviceName = ${methodName.substring(0,1).toUpperCase()} + ${methodName.substring(1)})
package ${packageName};

import io.quarkus.runtime.ShutdownEvent;
import io.quarkus.runtime.StartupEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.redisson.api.RedissonClient;
import org.redisson.api.listener.MessageListener;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.enterprise.context.ApplicationScoped;


import com.github.durex.messaging.event.RedisEventTopicHandler;
import static com.github.durex.messaging.api.model.CodecEnum.${codec};
import $paramType;
import ${packageName}.${serviceName}Listener;

@ApplicationScoped
public class ${serviceName}Config {

    private static final Logger log = LoggerFactory.getLogger(${serviceName}Config.class);

    @Inject
    RedissonClient redissonClient;
    @Inject
    ${simpleClassName} service;
    void onStart(@Observes StartupEvent event) {
        log.info("starting redisson remote service...");
        var ${methodName}handler= new RedisEventTopicHandler<$simpleParamType>();
        ${methodName}handler.setTopicName("${topicName}");
        ${methodName}handler.setPayloadCodec($codec);
        ${methodName}handler.listen(${simpleParamType}.class, new ${serviceName}Listener(service),redissonClient).subscribe(
            o -> log.info("Redisson Event Listener ID: {}, subscriber: {}", o,"${subscriber}")
            );
     }

    void onStop(@Observes ShutdownEvent ev) {
        log.info("The application is stopping...");
        redissonClient.shutdown();
    }
}
